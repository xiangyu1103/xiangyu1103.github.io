{"meta":{"title":"DREAMER","subtitle":"Dreamer Blog","description":"关注一线网络技术","author":"Dreamer","url":"https://xiangyu1103.github.io"},"pages":[{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-08-29T05:23:36.000Z","comments":false,"path":"bangumi/index.html","permalink":"https://xiangyu1103.github.io/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-08-29T05:23:36.000Z","comments":true,"path":"comment/index.html","permalink":"https://xiangyu1103.github.io/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-08-29T05:23:36.000Z","comments":false,"path":"client/index.html","permalink":"https://xiangyu1103.github.io/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-08-29T05:23:36.000Z","comments":false,"path":"donate/index.html","permalink":"https://xiangyu1103.github.io/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-08-29T05:23:36.000Z","comments":false,"path":"lab/index.html","permalink":"https://xiangyu1103.github.io/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2019-08-29T05:23:36.000Z","comments":false,"path":"about/index.html","permalink":"https://xiangyu1103.github.io/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2019-08-29T05:23:36.000Z","comments":true,"path":"links/index.html","permalink":"https://xiangyu1103.github.io/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2019-12-20T06:14:19.947Z","comments":false,"path":"music/index.html","permalink":"https://xiangyu1103.github.io/music/index.html","excerpt":"","text":"","keywords":"Dreamer的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-08-29T05:23:36.000Z","comments":true,"path":"rss/index.html","permalink":"https://xiangyu1103.github.io/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2019-08-29T05:23:36.000Z","comments":true,"path":"tags/index.html","permalink":"https://xiangyu1103.github.io/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-08-29T05:23:36.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://xiangyu1103.github.io/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-08-29T05:23:36.000Z","comments":false,"path":"video/index.html","permalink":"https://xiangyu1103.github.io/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"图集","date":"2019-12-25T04:25:20.000Z","updated":"2019-12-25T04:25:20.624Z","comments":false,"path":"tags/图集/index.html","permalink":"https://xiangyu1103.github.io/tags/图集/index.html","excerpt":"","text":"","keywords":null}],"posts":[{"title":"资源","slug":"资源","date":"2019-12-25T08:05:42.000Z","updated":"2019-12-25T08:06:43.250Z","comments":true,"path":"2019/12/25/资源/","link":"","permalink":"https://xiangyu1103.github.io/2019/12/25/资源/","excerpt":"","text":"","categories":[{"name":"资源","slug":"资源","permalink":"https://xiangyu1103.github.io/categories/资源/"}],"tags":[],"keywords":[{"name":"资源","slug":"资源","permalink":"https://xiangyu1103.github.io/categories/资源/"}]},{"title":"shell基础教程","slug":"shell基础教程","date":"2019-12-25T06:45:42.000Z","updated":"2019-12-25T06:46:57.127Z","comments":true,"path":"2019/12/25/shell基础教程/","link":"","permalink":"https://xiangyu1103.github.io/2019/12/25/shell基础教程/","excerpt":"","text":"","categories":[{"name":"shell","slug":"shell","permalink":"https://xiangyu1103.github.io/categories/shell/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://xiangyu1103.github.io/tags/linux/"},{"name":"shell","slug":"shell","permalink":"https://xiangyu1103.github.io/tags/shell/"}],"keywords":[{"name":"shell","slug":"shell","permalink":"https://xiangyu1103.github.io/categories/shell/"}]},{"title":"Nginx反向代理与正向代理","slug":"Nginx 反向代理与正向代理","date":"2019-12-25T06:45:23.000Z","updated":"2019-12-25T06:53:53.921Z","comments":true,"path":"2019/12/25/Nginx 反向代理与正向代理/","link":"","permalink":"https://xiangyu1103.github.io/2019/12/25/Nginx 反向代理与正向代理/","excerpt":"","text":"Nginx 反向代理与正向代理代理分为正向代理和反向代理,本次就来演示一下Nginx配置正向代理和反向代理的场景。 顺便讲解一下正向代理和反向代理的区别正向代理和反向代理的区别 Nginx 首先，我们需要知道什么是反向代理和正向代理区别 一、正向代理 正向代理简单的来说就是我们的代理服务器代替用户去请求后端节点 nginx正向代理代替工具还有goproxy 为什么要使用正向代理 用户无法直接访问服务器B （常见例子就是我们使用的Shadowsocks） Cache缓存作用 cache缓存技术和代理服务技术是紧密联系的（不只是正向代理使用cache缓存，反向代理同时也使用缓存）简单的来说就是用户A访问了代理服务器，那么代理服务器会将用户A的数据保存一段时间，如果该时间段呢用户B同时也访问了代理服务器，那么代理服务器将不会直接请求服务器B，而是直接将缓存直接返回给用户A 拦截访问 假设用户A和用户B都设置了代理服务器，用户A允许访问互联网，而用户B不允许防火互联网（这个代理服务器Z上做限制）这样用户A因为授权，可以通过代理服务器访问到服务器C，而用户B因为没有被代理服务器授权时，数据包会直接丢弃 隐藏访问者 我们可以看出服务器C并不知道访问自己的实际是用户A，因为代理服务器Z代替用户A去直接与服务器C进行交互，如果代理服务器Z完全被用户A控制（或不完全控制）会惯以肉鸡术语称呼 正向代理总结 正向代理是一个位于客户端和原始服务器(origin server)之前的服务器，为了从原始服务器获取内容，客户端向代理发送一个请求并指定目标，然后代理服务器向原始服务器转交请求并将获得的内容返回给客户端。客户端必须设置正向代理服务器。（类似于我们的ss服务） 二、反向代理反向代理正好与正向代理相反，对于客户端而言代理服务器就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理发送普通请求，接着反向代理将判断向何处(后端节点)转交请求，并将获得的内容返回给客户端 通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器，并将本来要直接发送到Web服务器上的http请求发送到代理服务器中，当一个代理服务器能够代理外部网络上的主机，访问内部网络时，这种代理服务的方式成为反向代理服务 透明代理 透明代理的意思是客户端根本不需要指定有代理服务器的存在，改变你的request fields(报文)，并会传送真实IP，注意加密的透明代理则属于匿名代理，意思是不用设置代理了。透明代理实践的例子就是很多公司所使用的行为管理软件 当用户A和用户B并不知道行为管理设备充当透明代理行为，用户A或者用户B向服务器A或者服务器B提交请求的时候，透明代理设备根据自身策略拦截并修改用户A或B的报文，并作为实际的请求方，向服务器A或者B发送请求，当接受信息回传，透明代理再根据自身的设置把允许的保存发回至用户A或B，如果透明代理设置不允许访问服务器B，那么用户A或者用户B就不会得到服务器B的数据 三、正向代理配置测试我们使用nginx代理上网为例子进行演示nginx正向代理 下载并安装nginx (正向代理不需要单独的模块) 我们使用2台服务器都进行如下操作 10.4.82.140 tomcat.i4t.com 为后端应用服务(域名为tomcat.i4t.com) 10.4.82.142 nginx.i4t.com 为代理服务器(域名为nginx.i4t.com) 请仔细阅读本段 首先我们代理服务器几乎不进行任何配置，只是一个普通的nginx代理，所有修改nginx的配置都是在代理服务器上添加 两台nginx默认配置如下 1.nginx版本没有太大要求 wget http://nginx.org/download/nginx-1.10.3.tar.gz #按照依赖包 yum install -y gcc glibc gcc-c++ prce-devel openssl-devel pcre-devel useradd -s /sbin/nologin nginx -M tar xf nginx-1.10.3.tar.gz &amp;&amp; cd nginx-1.10.3 #编译 ./configure --prefix=/usr/local/nginx-1.10.3 --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module 检查 /usr/loca/nginx/sbin/nginx -t 启动 /usr/local/nginx/sbin/nginx 查看服务器是否启动 netstat -lntp|grep nginx tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 7058/nginx: master 接下来是配置nginx代理 首先我们先配置2台nginx服务器 1.先配置nginx.i4t.com nginx信息 #配置10.4.82.142 后端服务器 cat /usr/local/nginx/conf/nginx.conf user nginx; worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; log_format main &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39; &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39; &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;; access_log logs/access.log main; sendfile on; tcp_nopush on; keepalive_timeout 65; gzip on; server { listen 80; server_name nginx.i4t.com; location / { root /usr/local/nginx/html; } } } echo &quot;nginx.i4t.com&quot; &gt;/usr/local/nginx/html/index.html /usr/local/nginx/sbin/nginx -s reload 此时nginx.i4t.com域名访问如下 接下来配置后端服务器 代理服务器默认配置 10.4.82.140 以下是后端服务器默认配置 user nginx; worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; log_format main &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39; &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39; &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;; access_log logs/access.log main; sendfile on; keepalive_timeout 65; server { listen 80; server_name tomcat.i4t.com; location / { root html; index index.html index.htm; } } } echo &quot; tomcat.i4t.com&quot; &gt;/usr/local/nginx/html/index.html /usr/local/nginx/sbin/nginx -s reload tomcat.i4t.com后端服务器的访问内容如下 接下来我们将tomcat.i4t.com 也就是10.4.82.140进行配置权限 #只允许10.4.82.142访问 cat /usr/local/nginx/conf/nginx.conf user nginx; worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; log_format main &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39; &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39; &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;; access_log logs/access.log main; sendfile on; tcp_nopush on; keepalive_timeout 65; gzip on; server { listen 80; server_name tomcat.i4t.com; resolver 8.8.8.8; location / { proxy_pass $scheme://$host$request_uri; if ( $remote_addr !~* &quot;10.4.82.142&quot;) { return 403; } root /usr/local/nginx/html; } } } #proxy_pass $scheme://$host（请求的域名）$request_uri; 域名后面参数 #resolver DNS地址，可以不写 我们可以看到我们现在电脑已经无法访问tomcat.i4t.com，需要注意的是，我们只是修改了tomcat.i4t.com的代理，nginx.i4t.com依旧可以正常访问的 现在我们进行代理配置 windows配置如下 IE--&gt;Internet选项--&gt;连接--&gt;局域网设置--&gt;代理服务器 mac设置如下 Linux export http_proxy=http://10.4.82.142:80 wget http://tomcat.i4t.com 这时候我们访问tomcat.i4t.com就是200，状态 四、反向代理配置测试安装和上面编译安装一样，没有特殊模块。只需要修改配置文件 cat /usr/local/nginx/conf/nginx.conf user www; worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; log_format main &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39; &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39; &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;; access_log logs/access.log main; sendfile on; tcp_nopush on; keepalive_timeout 65; gzip on; server { listen 80; server_name nginx.i4t.com; location / { proxy_pass http://abcdocker; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } upstream abcdocker { server 10.4.82.140:8080; server 127.0.0.1:8080; } } #proxy_pass 代理节点，可以用ip+端口 #upstream 后面写名称 #server 后端节点名称 访问验证，我们访问nginx.i4t.com域名打开的是tomcat后端节点 请注意缓存（google浏览器缓存不是很好清理）","categories":[{"name":"nginx","slug":"nginx","permalink":"https://xiangyu1103.github.io/categories/nginx/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://xiangyu1103.github.io/tags/linux/"},{"name":"nginx","slug":"nginx","permalink":"https://xiangyu1103.github.io/tags/nginx/"}],"keywords":[{"name":"nginx","slug":"nginx","permalink":"https://xiangyu1103.github.io/categories/nginx/"}]},{"title":"php基础教程","slug":"php基础教程","date":"2019-12-25T06:45:23.000Z","updated":"2019-12-25T06:46:33.660Z","comments":true,"path":"2019/12/25/php基础教程/","link":"","permalink":"https://xiangyu1103.github.io/2019/12/25/php基础教程/","excerpt":"","text":"","categories":[{"name":"php","slug":"php","permalink":"https://xiangyu1103.github.io/categories/php/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://xiangyu1103.github.io/tags/linux/"},{"name":"php","slug":"php","permalink":"https://xiangyu1103.github.io/tags/php/"}],"keywords":[{"name":"php","slug":"php","permalink":"https://xiangyu1103.github.io/categories/php/"}]},{"title":"vs code 的常用快捷键","slug":"VS Code 的常用快捷键","date":"2019-01-01T02:16:01.000Z","updated":"2019-12-20T02:42:45.194Z","comments":true,"path":"2019/01/01/VS Code 的常用快捷键/","link":"","permalink":"https://xiangyu1103.github.io/2019/01/01/VS Code 的常用快捷键/","excerpt":"","text":"一、vs code 的常用快捷键1、注释： a) 单行注释：[ctrl+k,ctrl+c] 或 ctrl+/ b) 取消单行注释：[ctrl+k,ctrl+u] (按下ctrl不放，再按k + u) c) 多行注释：[alt+shift+A] d) 多行注释：/** 2、移动行：alt+up/down 3、显示/隐藏左侧目录栏 ctrl + b 4、复制当前行：shift + alt +up/down 5、删除当前行：shift + ctrl + k 6、控制台终端显示与隐藏：ctrl + ~ 7、查找文件/安装vs code 插件地址：ctrl + p 8、代码格式化：shift + alt +f 9、新建一个窗口 : ctrl + shift + n 10、行增加缩进: ctrl + [ 11、行减少缩进: ctrl + ] 12、裁剪尾随空格(去掉一行的末尾那些没用的空格) : ctrl + shift + x 13、字体放大/缩小: ctrl + ( + 或 - ) 14、拆分编辑器 : ctrl + 1/2/3 15、切换窗口 : ctrl + shift + left/right 16、关闭编辑器窗口 : ctrl + w 17、关闭所有窗口 : ctrl + k + w 18、切换全屏 : F11 19、自动换行 : alt + z 20、显示git : ctrl + shift + g 21、全局查找文件：ctrl + shift + f 22、显示相关插件的命令(如：git log)：ctrl + shift + p 23、选中文字：shift + left / right / up / down 24、折叠代码： ctrl + k + 0-9 (0是完全折叠) 25、展开代码： ctrl + k + j (完全展开代码) 26、删除行 ： ctrl + shift + k 27、快速切换主题：ctrl + k / ctrl + t 28、快速回到顶部 ： ctrl + home 29、快速回到底部 : ctrl + end 30、格式化选定代码 ：ctrl + k / ctrl +f 31、选中代码 ： shift + 鼠标左键 32、多行同时添加内容（光标） ：ctrl + alt + up/down 33、全局替换：ctrl + shift + h 34、当前文件替换：ctrl + h 35、打开最近打开的文件：ctrl + r 36、打开新的命令窗：ctrl + shift + c 二、vs code 的常用插件1、Auto Rename Tag 修改html标签，自动帮你完成尾部闭合标签的同步修改，和webstorm一样。 2、Auto Close Tag 自动闭合HTML标签 4、Beautiful 格式化代码的工具 5、Dash Dash是MacOS的API文档浏览器和代码段管理器 6、Ejs Snippets ejs 代码提示 7、ESLint 检查javascript语法错误与提示 8、File Navigator 快速查找文件 9、Git History(git log) 查看git log 10、Gulp Snippets 写gulp时用到，gulp语法提示。 11、HTML CSS Support 在HTML标签上写class智能提示当前项目所支持的样式 12、HTML Snippets 超级好用且初级的H5代码片段以及提示 13、Debug for Chrome 让vs code映射chrome的debug功能，静态页面都可以用vscode来打断点调试、配饰稍微复杂一点 14、Document this Js的注释模板 15、jQuery Code Snippets jquery提示工具 16、Html2jade html模板转pug模板 17、JS-CSS-HTML Formatter 格式化 18、Npm intellisense require 时的包提示工具 19、Open in browser 打开默认浏览器 20、One Dark Theme 一个vs code的主题 21、Path Intellisense 自动路径补全、默认不带这个功能 22、Project Manager 多个项目之间快速切换的工具 23、Pug(Jade) snippets pug语法提示 24、React Components 根据文件名创建反应组件代码。 25、React Native Tools reactNative工具类为React Native项目提供了开发环境。 26、Stylelint css/sass代码审查 27、Typings auto installer 安装vscode 的代码提示依赖库，基于typtings的 28、View In Browser 默认浏览器查看HTML文件（快捷键Ctrl+F1可以修改） 29、Vscode-icons 让vscode资源目录加上图标、必备 30、VueHelper Vue2代码段（包括Vue2 api、vue-router2、vuex2） 31、Vue 2 Snippets vue必备vue代码提示 32、Vue-color vue语法高亮主题 33、Auto-Open Markdown Preview markdown文件自动开启预览 34、EverMonkey 印象笔记 35、atom one dark atom的一个高亮主题(个人推荐) 三、常用的电脑快捷键 1、ctrl + shift + delete 快速清除浏览器缓存 2、ctrl + alt + delete 快速进入任务管理器页面 3、window + L 快速锁定电脑 4、window + d 所有窗口最小化 5、 window + e 打开我的资源管理器(我的电脑) 6、 window + f 快速打开搜索窗口 7、 alt + tab 快速查看打开的应用与窗口","categories":[{"name":"生活","slug":"生活","permalink":"https://xiangyu1103.github.io/categories/生活/"}],"tags":[{"name":"web","slug":"web","permalink":"https://xiangyu1103.github.io/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"https://xiangyu1103.github.io/tags/悦读/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"https://xiangyu1103.github.io/categories/生活/"}]},{"title":"tomcat基础","slug":"tomcat基础教程","date":"2019-01-01T02:16:01.000Z","updated":"2019-12-25T07:40:24.164Z","comments":true,"path":"2019/01/01/tomcat基础教程/","link":"","permalink":"https://xiangyu1103.github.io/2019/01/01/tomcat基础教程/","excerpt":"","text":"","categories":[{"name":"tomcat","slug":"tomcat","permalink":"https://xiangyu1103.github.io/categories/tomcat/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://xiangyu1103.github.io/tags/linux/"},{"name":"Tomcat","slug":"Tomcat","permalink":"https://xiangyu1103.github.io/tags/Tomcat/"}],"keywords":[{"name":"tomcat","slug":"tomcat","permalink":"https://xiangyu1103.github.io/categories/tomcat/"}]},{"title":"HCL模拟器设备远程登录方法","slug":"HCL模拟器设备远程登录方法","date":"2018-12-12T14:16:01.000Z","updated":"2019-12-18T08:48:16.207Z","comments":true,"path":"2018/12/12/HCL模拟器设备远程登录方法/","link":"","permalink":"https://xiangyu1103.github.io/2018/12/12/HCL模拟器设备远程登录方法/","excerpt":"","text":"一、设备创建和网卡桥接 NIC:ip为192.168.56.1/24 设备用户名admin密码123 二、配置管理 ip地址&lt;H3C&gt;system-view #进入系统视图 [H3C]interface Vlan-interface 1 #创建Vlan1管理接口 [H3C-Vlan-interface1]ip address 192.168.56.5 24 #配置管理ip地址 [H3C-Vlan-interface1]display this #查看当前配置 # interface Vlan-interface1 ip address 192.168.56.5 255.255.255.0 [H3C-Vlan-interface1]display interface Vlan-interface brief #查看端口信息 Brief information on interfaces in route mode: Link: ADM - administratively down; Stby - standby Protocol: (s) - spoofing Interface Link Protocol Primary IP Description Vlan1 UP UP 192.168.56.5 三、配置telnet ssh https 远程连接服务①、视图与用户配置[H3C]user-interface vty 0 4 #进入vty用户接口配置视图 [H3C-line-vty0-4]authentication-mode scheme #配置登录用户的认证方式为AAA认证 [H3C-line-vty0-4]protocol inbound ? #允许远程用户登录协议 all All protocols ssh SSH protocol telnet Telnet protocol [H3C-line-vty0-4]protocol inbound all [H3C-line-vty0-4]user-role network-admin #配置用户角色权限级别 [H3C-line-vty0-4]user-role level-15 # 配置用户界面角色级别 [H3C-line-vty0-4]quit [H3C]local-user admin # 进入本地用户配置界面 [H3C-luser-manage-admin]password simple 123 # 配置用户密码 [H3C-luser-manage-admin]service-type ? #本地用户登录服务类型 ftp FTP service http HTTP service type https HTTPS service type pad X.25 PAD service ssh Secure Shell service telnet Telnet service terminal Terminal access service [H3C-luser-manage-admin]service-type telnet ssh https [H3C-luser-manage-admin]authorization-attribute user-role network-admin [H3C-luser-manage-admin]authorization-attribute user-role level-15 #配置用户角色级别 [H3C-luser-manage-admin]quit ②、开启服务[H3C]telnet server enable # 开启telnet服务 [H3C]ip https enable # 开启https服务 #开启ssh服务前生成本地密钥对 [H3C]public-key local create dsa # 生成本地用户DSA [H3C]public-key local create rsa # 生成本地用户RSA [H3C]ssh server enable # 开启ssh服务 ③、测试远程连接 登录成功！！！end","categories":[{"name":"技术","slug":"技术","permalink":"https://xiangyu1103.github.io/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"https://xiangyu1103.github.io/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"https://xiangyu1103.github.io/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://xiangyu1103.github.io/categories/技术/"}]},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2018-12-12T14:16:01.000Z","updated":"2019-08-29T05:23:36.000Z","comments":true,"path":"2018/12/12/Hexo-Theme-Sakura/","link":"","permalink":"https://xiangyu1103.github.io/2018/12/12/Hexo-Theme-Sakura/","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: { path: /, fa: fa-fort-awesome faa-shake } 归档: { path: /archives, fa: fa-archive faa-shake, submenus: { 技术: {path: /categories/技术/, fa: fa-code }, 生活: {path: /categories/生活/, fa: fa-file-text-o }, 资源: {path: /categories/资源/, fa: fa-cloud-download }, 随想: {path: /categories/随想/, fa: fa-commenting-o }, 转载: {path: /categories/转载/, fa: fa-book } } } 清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { 书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: {path: /bangumi/, fa: fa-film faa-vertical }, 歌单: {path: /music/, fa: fa-headphones }, 图集: {path: /tags/图集/, fa: fa-photo } } } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 赞赏: { path: /donate/, fa: fa-heart faa-pulse } 关于: { path: /, fa: fa-leaf faa-wrench , submenus: { 我？: {path: /about/, fa: fa-meetup}, 主题: {path: /theme-sakura/, fa: iconfont icon-sakura }, Lab: {path: /lab/, fa: fa-cogs }, } } 客户端: { path: /client/, fa: fa-android faa-vertical } RSS: { path: /atom.xml, fa: fa-rss faa-pulse } # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png} - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg} - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg} # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: {url: http://github.com/honjun, img: /img/social/github.png} sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png} wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png} zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png} email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg} wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png} # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: {url: http://github.com/honjun, fa: fa-github, color: 333} weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39} qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe} # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： {% bili video_id [page] %} 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： {% fb_img src [caption] %} 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"技术","slug":"技术","permalink":"https://xiangyu1103.github.io/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"https://xiangyu1103.github.io/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"https://xiangyu1103.github.io/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://xiangyu1103.github.io/categories/技术/"}]},{"title":"Github+jsDelivr+PicGo 打造稳定快速、高效免费图床","slug":"Github+jsDelivr+PicGo 打造稳定快速、高效免费图床","date":"2018-12-11T12:16:01.000Z","updated":"2019-12-25T03:12:27.188Z","comments":true,"path":"2018/12/11/Github+jsDelivr+PicGo 打造稳定快速、高效免费图床/","link":"","permalink":"https://xiangyu1103.github.io/2018/12/11/Github+jsDelivr+PicGo 打造稳定快速、高效免费图床/","excerpt":"","text":"Github+jsDelivr+PicGo 打造稳定快速、高效免费图床 – 前言图床是个啥东西就不用过多介绍了，先来对比一下各路图床： 微博图床：以前用的人比较多，从2019年4月开始开启了防盗链，凉凉 SM.MS：运营四年多了，也变得越来越慢了，到了晚上直接打不开图片，速度堪忧 其他小众图床：随时有挂掉的风险 Imgur等国外图床：国内访问速度太慢，随时有被墙的风险 大厂储存服务：例如七牛云、又拍云、腾讯云COS、阿里云OSS等，容量限制，操作繁琐，又是实名认证又是域名备案的，麻烦，而且还要花钱（有钱又不怕麻烦的当我没说） 因此，GitHub 图床是个不错的选择，利用 jsDelivr CDN 加速访问（jsDelivr 是一个免费开源的 CDN 解决方案），PicGo 工具一键上传，操作简单高效，GitHub 和 jsDelivr 都是大厂，不用担心跑路问题，不用担心速度和容量问题，而且完全免费，可以说是目前免费图床的最佳解决方案！ – 新建GitHub仓库登录/注册GitHub，新建一个仓库，填写好仓库名，仓库描述，根据需求选择是否为仓库初始化一个README.md描述文件 – 生成一个Token在主页依次选择【Settings】-【Developer settings】-【Personal access tokens】-【Generate new token】，填写好描述，勾选【repo】，然后点击【Generate token】生成一个Token，注意这个Token只会显示一次，自己先保存下来，或者等后面配置好PicGo后再关闭此网页 – 配置PicGo前往下载PicGo，安装好后开始配置图床 设定仓库名：按照【用户名/图床仓库名】的格式填写 设定分支名：【master】 设定Token：粘贴之前生成的【Token】 指定存储路径：填写想要储存的路径，如【ITRHX-PIC/】，这样就会在仓库下创建一个名为 ITRHX-PIC 的文件夹，图片将会储存在此文件夹中 设定自定义域名：它的作用是，在图片上传后，PicGo 会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接，并放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为【https://cdn.jsdelivr.net/gh/用户名/图床仓库名 】，上传完毕后，我们就可以通过【https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径 】加速访问我们的图片了，比如上图的图片链接为：https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png 关于 jsDelivr 具体是如何引用资源的可以参考我的另一篇博客：《免费CDN：jsDelivr+Github》 – 进行高效创作配置好PicGo后，我们就可以进行高效创作了，将图片拖拽到上传区，将会自动上传并复制访问链接，将链接粘贴到博文中就行了，访问速度杠杠的，此外PicGo还有相册功能，可以对已上传的图片进行删除，修改链接等快捷操作，PicGo还可以生成不同格式的链接、支持批量上传、快捷键上传、自定义链接格式、上传前重命名等，更多功能自己去探索吧！","categories":[{"name":"Linux","slug":"Linux","permalink":"https://xiangyu1103.github.io/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://xiangyu1103.github.io/tags/linux/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"https://xiangyu1103.github.io/categories/Linux/"}]},{"title":"Linux定时备份MySQL数据库","slug":"Linux定时备份MySQL数据库","date":"2018-12-11T12:16:01.000Z","updated":"2019-12-25T06:13:14.075Z","comments":true,"path":"2018/12/11/Linux定时备份MySQL数据库/","link":"","permalink":"https://xiangyu1103.github.io/2018/12/11/Linux定时备份MySQL数据库/","excerpt":"","text":"Linux定时备份MySQL数据库一开始没想到我会弄这个，以前觉得数据库一般很安全不需要定时备份。但是前几天的经历还是让我意识到了定时备份数据库的重要性，一个作业的数据库莫名其妙没了，后面通过快照回滚找回来了。后来就想到定时备份数据库了，经过一番折腾终于完成了这个功能。接下来就详细记一下 Linux定时备份MySQL数据库 的教程。 系统环境 CentOS 7.6.1810 MySQL 5.7.26 Step 1：创建目录### 创建定时脚本目录 mkdir -p /home/backup/mysql/shell ### 创建sql文件放置目录 mkdir -p /home/backup/mysql/sql Step 2：编写备份脚本在我们上一步新建的 /home/backup/mysql/shell 下 新建一个 backup.sh,内容如下 ### 数据库用户 db_user=&quot;root&quot; ### 数据库用户密码 db_passwd=&quot;*******&quot; ### 要备份的数据库名称 db_name=&quot;example&quot; ### 备份出来的sql名称 name=&quot;example-&quot;$(date &quot;+%Y-%m-%d-%H-%M-%S&quot;) ###前面路径是mysql绝对路径，后面/home/backup/mysql/sql/是要备份到的目录 /www/server/mysql/bin/mysqldump -u$db_user -p$db_passwd $db_name&gt;/home/backup/mysql/sql/$name.sql Step 3：给脚本添加可执行权限这一步很重要，不给backup.sh添加可执行权限，定时任务是无法完成备份的。 chmod +x backup.sh Step 4： 将脚本添加到定时任务首先使用如下命令编辑定时任务 crontab -e 编辑的内容如下 ###每一分钟执行一次后面的脚本(设置的周期短易于观察） */1 * * * * /home/backup/mysql/shell/backup.sh Step 5 ：查看执行情况去我们制定的备份目录/home/backup/mysql/sql查看是否输出了sql文件 可以看到每一分钟都输出了sql文件，让我们看看里面的内容 确实看到了user表的数据，至此也就大功告成 附：crontab 定时任务时间格式设定crontab 文件的格式{minute} {hour} {day-of-month} {month} {day-of-week} {full-path-to-shell-script} minute: 区间为 0 – 59 hour: 区间为0 – 23 day-of-month: 区间为0 – 31 month: 区间为1 – 12. 1 是1月. 12是12月. Day-of-week: 区间为0 – 7. 周日可以是0或7. 示例 /1 * 每分钟运行一次命令 0 每小时执行 0 0 * 每天执行 0 0 0 每周执行 0 0 1 每月执行","categories":[{"name":"mysql","slug":"mysql","permalink":"https://xiangyu1103.github.io/categories/mysql/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://xiangyu1103.github.io/tags/linux/"},{"name":"mysql","slug":"mysql","permalink":"https://xiangyu1103.github.io/tags/mysql/"}],"keywords":[{"name":"mysql","slug":"mysql","permalink":"https://xiangyu1103.github.io/categories/mysql/"}]},{"title":"Linux彻底卸载Nginx","slug":"Linux彻底卸载Nginx","date":"2018-12-11T12:16:01.000Z","updated":"2019-12-18T09:05:11.160Z","comments":true,"path":"2018/12/11/Linux彻底卸载Nginx/","link":"","permalink":"https://xiangyu1103.github.io/2018/12/11/Linux彻底卸载Nginx/","excerpt":"","text":"本机环境：centos7使用yum安装的Nginx 1.首先输入命令 ps -ef | grep nginx检查一下nginx服务是否在运行。 [root@localhost /]# ps -ef |grep nginx root 3163 2643 0 14:08 tty1 00:00:00 man nginx root 5427 1 0 14:50 ? 00:00:00 nginx: master process nginx nginx 5428 5427 0 14:50 ? 00:00:00 nginx: worker process root 5532 2746 0 14:52 pts/0 00:00:00 grep --color=auto nginx 2.停止Nginx服务 [root@localhost /]# /usr/sbin/nginx -s stop [root@localhost /]# netstat -lntp Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:111 0.0.0.0:* LISTEN 1/systemd tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1261/sshd tcp6 0 0 :::111 :::* LISTEN 1/systemd tcp6 0 0 :::22 :::* LISTEN 1261/sshd 3.查找、删除Nginx相关文件 查看Nginx相关文件：whereis nginx[root@localhost /]# whereis nginx nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx /usr/share/man/man8/nginx.8.gz /usr/share/man/man3/nginx.3pm.gz find查找相关文件[root@localhost /]# find / -name nginx /usr/lib64/perl5/vendor_perl/auto/nginx /usr/lib64/nginx /usr/share/nginx /usr/sbin/nginx /etc/logrotate.d/nginx /etc/nginx /var/lib/nginx /var/log/nginx 依次删除find查找到的所有目录：rm -rf /usr/sbin/nginx 4.再使用yum清理 [root@localhost /]# yum remove nginx 依赖关系解决 ====================================================================================================== Package 架构 版本 源 大小 ====================================================================================================== 正在删除: nginx x86_64 1:1.12.2-3.el7 @epel 1.5 M 为依赖而移除: nginx-all-modules noarch 1:1.12.2-3.el7 @epel 0.0 nginx-mod-http-geoip x86_64 1:1.12.2-3.el7 @epel 21 k nginx-mod-http-image-filter x86_64 1:1.12.2-3.el7 @epel 24 k nginx-mod-http-perl x86_64 1:1.12.2-3.el7 @epel 54 k nginx-mod-http-xslt-filter x86_64 1:1.12.2-3.el7 @epel 24 k nginx-mod-mail x86_64 1:1.12.2-3.el7 @epel 99 k nginx-mod-stream x86_64 1:1.12.2-3.el7 @epel 157 k 事务概要 ====================================================================================================== 移除 1 软件包 (+7 依赖软件包) 安装大小：1.9 M 是否继续？[y/N]： ok nginx 卸载完成！","categories":[{"name":"技术","slug":"技术","permalink":"https://xiangyu1103.github.io/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"https://xiangyu1103.github.io/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"https://xiangyu1103.github.io/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://xiangyu1103.github.io/categories/技术/"}]},{"title":"centos7-5快速yum、编译安装nginx方法（命令）","slug":"centos7-5快速yum、编译安装nginx方法（命令）","date":"2018-12-11T12:16:01.000Z","updated":"2019-12-18T09:07:20.756Z","comments":true,"path":"2018/12/11/centos7-5快速yum、编译安装nginx方法（命令）/","link":"","permalink":"https://xiangyu1103.github.io/2018/12/11/centos7-5快速yum、编译安装nginx方法（命令）/","excerpt":"","text":"1.yum安装最新版Nginx源rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 安装Nginxyum install -y nginx Nginx默认目录whereis nginx nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx 以下是Nginx的默认路径： (1) Nginx配置路径：/etc/nginx/ (2) PID目录：/var/run/nginx.pid (3) 错误日志：/var/log/nginx/error.log (4) 访问日志：/var/log/nginx/access.log (5) 默认站点目录：/usr/share/nginx/html 事实上，只需知道Nginx配置路径，其他路径均可在/etc/nginx/nginx.conf 以及/etc/nginx/conf.d/default.conf 中查询到。 常用命令 (1) 启动： nginx (2) 测试Nginx配置是否正确： nginx -t (3) 优雅重启： nginx -s reload (4) 停止： nginx -s stop 2. centos7.5 1804 编译安装nginx方法安装依赖软件包集合yum install openssl openssl-devel pcre pcre-devel -y rpm -qa openssl openssl-devel pcre pcre-devel 安装nginx软件包命令集合mkdir -p /application /tools cd /tools wget -q http://nginx.org/download/nginx-1.16.0.tar.gz tar -zxvf nginx-1.16.0.tar.gz useradd -s /sbin/nologin -M nginx cd nginx-1.16.0 ./configure --user=nginx --group=nginx --prefix=/application/nginx-1.16.0 --with-http_ssl_module --with-http_stub_status_module --with-http_flv_module --http-fastcgi-temp-path=/application/nginx-1.16.0/nginx/fcgi #比较全的编译配置 ------------------------------------------------------------------------------------------------------------------- ./configure ./configure --prefix=/usr --sbin-path=/usr/local/sbin/nginx --conf-path=/usr/local/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --pid-path=/usr/local/run/nginx/nginx.pid --lock-path=/usr/local/lock/nginx.lock --user=nginx --group=nginx --with-http_ssl_module --with-http_flv_module --with-http_gzip_static_module --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/tem/nginx/client --http-proxy-temp-path=/var/tem/nginx/proxy --http-fastcgi-temp-path=/var/tem/nginx/fcgi --with-http_stub_status_module ------------------------------------------------------------------------------------------------------------------- make make install ln -s /application/nginx-1.16.0 /application/nginx #设置配置文件 cd /application/nginx/conf cp nginx.conf nginx.conf.bak egrep -v &quot;#|^$&quot; nginx.conf.bak &gt;nginx.conf #去除#号开头和空行 #启动nginx /application/nginx/sbin/nginx -t #有报错 mkdir nginx/fcgi /application/nginx/sbin/nginx #启动完成80端口可以访问 nginx安装完成 附录 nginx.conf基础配置文件worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; log_format main &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39; &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39; &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;; server { listen 80; server_name www.oldboy.com; location / { root html/www; index index.html index.htm; } access_log logs/access_www.log main; } server { listen 80; server_name bbs.oldboy.com; location / { root html/bbs; index index.html index.htm; } access_log logs/access_bbs.log main; } }","categories":[{"name":"技术","slug":"技术","permalink":"https://xiangyu1103.github.io/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"https://xiangyu1103.github.io/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"https://xiangyu1103.github.io/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://xiangyu1103.github.io/categories/技术/"}]}]}